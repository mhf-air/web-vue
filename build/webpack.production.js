const { resolve, CompressPlugin } = require("./util.js")
const common = require("./webpack.common.js")

const merge = require("webpack-merge")

const MiniCssExtractPlugin = require("mini-css-extract-plugin")
const PrerenderSPAPlugin = require("prerender-spa-plugin")

const prerenderOption = {
  staticDir: resolve("www"),
  outputDir: resolve("www/prerender"),
  routes: [
    "/",
  ],
  minify: {
    caseSensitive: false,
    collapseBooleanAttributes: true,
    collapseInlineTagWhitespace: false,
    collapseWhitespace: true,
    conservativeCollapse: false,
    decodeEntities: true,
    html5: true,
    includeAutoGeneratedTags: false,
    keepClosingSlash: false,
    maxLineLength: 0,

    minifyCSS: true,
    minifyJS: true,
    preserveLineBreaks: false,
    preventAttributesEscaping: false,
    processConditionalComments: true,
    processScripts: [
      "text/html"
    ],
    removeAttributeQuotes: false,
    removeComments: true,
    removeEmptyAttributes: true,
    removeEmptyElements: false,
    removeOptionalTags: false,
    removeRedundantAttributes: true,
    removeScriptTypeAttributes: true,
    removeStyleLinkTypeAttributes: true,
    removeTagWhitespace: true,
    sortAttributes: true,
    sortClassName: true,
    trimCustomFragments: true,
    useShortDoctype: true,
  },
}

module.exports = merge(common, {
  mode: "production",
  stats: "minimal",
  // stats: "verbose",

  output: {
    publicPath: "/", // may be cdn
    path: resolve("www"),
    filename: "js/[name].[contenthash:10].js",
  },

  module: {
    rules: [ //
      {
        test: /\.styl(us)?$/,
        use: [
          MiniCssExtractPlugin.loader,
          {
            loader: "css-loader",
            options: {
              minimize: true,
            },
          },
          "stylus-loader",
        ],
      },
      {
        test: /\.css$/,
        use: [ //
          {
            loader: MiniCssExtractPlugin.loader,
            options: {},
          },
          {
            loader: "css-loader",
            options: {
              minimize: true,
            },
          },
        ],
      },
      {
        test: /\.(png|jpe?g|gif|svg)(\?.*)?$/,
        use: [ //
          {
            loader: "file-loader",
            options: {
              name: "[path][name].[hash:10].[ext]",
              context: resolve("src/static"),
              publicPath: "/",
            },
          },
        ],
      },
      {
        test: /\.(mp4|webm|ogg|mp3|wav|flac|aac)(\?.*)?$/,
        use: [ //
          {
            loader: "file-loader",
            options: {
              name: "[path][name].[hash:10].[ext]",
              context: resolve("src/static"),
              publicPath: "/",
            },
          },
        ],
      },
      {
        test: /\.(woff2?|eot|ttf|otf)(\?.*)?$/,
        use: [ //
          {
            loader: "file-loader",
            options: {
              name: "[path][name].[hash:10].[ext]",
              context: resolve("src/static"),
              publicPath: "/",
            },
          },
        ],
      },
    ],
  },

  plugins: [
    new MiniCssExtractPlugin({
      filename: "css/[name].[contenthash:10].css",
    }),

    new PrerenderSPAPlugin(prerenderOption),

    new CompressPlugin({
      test: /\.(js|css|html)$/,
    }),
  ],

  optimization: {
    runtimeChunk: "single",
    /* splitChunks: {
      chunks: "all",
      name: "vendor",
    }, */
  },

})
